# The link parser is a generic C program that compiles with no errors or
# warnings on Unixes by DEC, HP, SUN, and Linux.  (It also compiles with
# no errors under windows 3.1, 95, and NT.  Get the windows distribution
# parse.zip in the directory above this one.)
#
# To compile the program type "make" while in this directory.  If you
# get an error, you may need to modify the CFLAGS line by replacing it
# with one of the following three options:
#
# CFLAGS     = -c -O -D__linux__
# CFLAGS     = -c -O -D__hpux__
# CFLAGS     = -c -O -D__sun__
#
# On at least one system (BSDI 3.0) I had to use gmake instead of make
# to get this makefile to work.     -- D. Sleator, June 2000

include ./Makefile.topdir.inc
include $(TOPDIR)/Makefile.inc

SRC         := src
INC         := include
OBJ         := obj
BIN         = .
CC          = gcc
LD          ?= $(CC)
CFLAGS      = -g -Wall -Wno-unused-function -Wno-unused-but-set-variable -Wno-unused-result -O
LDFLAGS     = -O -g
LDSOFLAGS   ?= $(LDFLAGS) -shared
SWIINC             ?= $(SWIHOME)/include
SWIPL_CFLAGS       ?= -I$(SWIINC)

INCLUDES    =\
$(INC)/lgp.h \
$(INC)/link-includes.h \
$(INC)/structures.h \
$(INC)/api-structures.h \
$(INC)/api.h \
$(INC)/externs.h \
$(INC)/analyze-linkage.h \
$(INC)/and.h \
$(INC)/build-disjuncts.h \
$(INC)/count.h \
$(INC)/error.h \
$(INC)/extract-links.h \
$(INC)/fast-match.h \
$(INC)/idiom.h \
$(INC)/linkset.h \
$(INC)/massage.h \
$(INC)/post-process.h \
$(INC)/pp_knowledge.h \
$(INC)/pp_lexer.h \
$(INC)/pp_linkset.h \
$(INC)/preparation.h \
$(INC)/print.h \
$(INC)/prune.h \
$(INC)/read-dict.h \
$(INC)/resources.h \
$(INC)/string-set.h \
$(INC)/tokenize.h \
$(INC)/utilities.h \
$(INC)/constituents.h \
$(INC)/word-file.h \
$(INC)/print-util.h

OBJECTS     =\
$(OBJ)/lgp.o \
$(OBJ)/prune.o \
$(OBJ)/and.o \
$(OBJ)/post-process.o \
$(OBJ)/pp_lexer.o \
$(OBJ)/resources.o \
$(OBJ)/analyze-linkage.o \
$(OBJ)/string-set.o \
$(OBJ)/pp_linkset.o \
$(OBJ)/pp_knowledge.o \
$(OBJ)/error.o \
$(OBJ)/word-file.o \
$(OBJ)/utilities.o \
$(OBJ)/tokenize.o \
$(OBJ)/command-line.o \
$(OBJ)/read-dict.o \
$(OBJ)/print.o \
$(OBJ)/preparation.o \
$(OBJ)/api.o \
$(OBJ)/massage.o \
$(OBJ)/linkset.o \
$(OBJ)/idiom.o \
$(OBJ)/fast-match.o \
$(OBJ)/extract-links.o \
$(OBJ)/count.o \
$(OBJ)/build-disjuncts.o \
$(OBJ)/constituents.o \
$(OBJ)/print-util.o

all:
	$(BIN)/lgp.$(SOEXT)

SWIPLLD:=$(shell which swipl-ld)

ifneq ($(SWIPLLD),)
$(BIN)/lgp.$(SOEXT): $(OBJECTS)
	"$(SWIPLLD)" -shared -o $(BIN)/lgp.$(SOEXT) $(OBJECTS)
else
$(BIN)/lgp.$(SOEXT): $(OBJECTS)
	$(CC) $(LDSOFLAGS) $(SWIPL_LDFLAGS) -o $@ $(OBJECTS) $(SWIPL_LIBS)
endif

$(SRC)/lgp.c: lgp.c
	cmp --quiet $< $@ || cp $< $@

$(INC)/lgp.h: lgp.h
	cmp --quiet $< $@ || cp $< $@

$(OBJ)/lgp.o: $(SRC)/lgp.c $(INCLUDES)
	$(CC) -c $(CFLAGS) -I$(INC) $(SWIPL_CFLAGS) $(SRC)/lgp.c -o $(OBJ)/lgp.o

$(OBJ)/%.o: $(SRC)/%.c $(INCLUDES)
	$(CC) -c $(CFLAGS) -I$(INC) -o $@ $<

./lgp_local.pl: ./lgp.pl
	sed -e 's/\(load_foreign_library(\)foreign[(]\([^)]*\)[)]/\1\2/' $< > $@

check: $(BIN)/lgp.$(SOEXT) ./lgp_local.pl ./lgp_lib_test.pl
	$(SWIPL) -g "['lgp_lib_test'],go,halt" -t 'halt(1)'

clean:
	/bin/rm -f $(OBJ)/*.o
	/bin/rm -f liblgp.$(SOEXT)
